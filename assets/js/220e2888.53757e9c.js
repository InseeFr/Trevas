"use strict";(self.webpackChunktrevas_documentation=self.webpackChunktrevas_documentation||[]).push([[4479],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(n),c=r,h=d["".concat(p,".").concat(c)]||d[c]||u[c]||i;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},57780:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={slug:"/trevas-temporal-operators",title:"Trevas - Temporal operators",authors:["hadrien"],tags:["Trevas"]},o=void 0,l={permalink:"/Trevas/blog/trevas-temporal-operators",source:"@site/blog/2024-06-21-temporal-operators.mdx",title:"Trevas - Temporal operators",description:"Temporal operators in Trevas",date:"2024-06-21T00:00:00.000Z",formattedDate:"June 21, 2024",tags:[{label:"Trevas",permalink:"/Trevas/blog/tags/trevas"}],readingTime:2.845,hasTruncateMarker:!1,authors:[{name:"Hadrien Kohl",link:"https://github.com/hadrienk",title:"Hadrien Kohl Consulting - Developer",image:"/img/profile_pic_hadrien_kohl.jpg",key:"hadrien"}],frontMatter:{slug:"/trevas-temporal-operators",title:"Trevas - Temporal operators",authors:["hadrien"],tags:["Trevas"]},prevItem:{title:"Trevas - SDMX",permalink:"/Trevas/blog/trevas-sdmx"},nextItem:{title:"Trevas - Java 17",permalink:"/Trevas/blog/trevas-java-17"}},p={authorsImageUrls:[void 0]},s=[{value:"Temporal operators in Trevas",id:"temporal-operators-in-trevas",level:3},{value:"Java mapping",id:"java-mapping",level:4},{value:"Function <code>flow_to_stock</code>",id:"function-flow_to_stock",level:4},{value:"Function <code>stock_to_flow</code>",id:"function-stock_to_flow",level:4},{value:"Function <code>timeshift</code>",id:"function-timeshift",level:4}],m={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"temporal-operators-in-trevas"},"Temporal operators in Trevas"),(0,r.kt)("p",null,"The version 1.4.1 of Trevas introduces preliminary support for date and time types\nand operators."),(0,r.kt)("p",null,"The specification describes temporal types such as ",(0,r.kt)("inlineCode",{parentName:"p"},"date"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"time_period"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"time"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"duration"),". However, Trevas authors find\nthese descriptions unsatisfactory. This blog post outlines our implementation choices and how they differ from the spec."),(0,r.kt)("p",null,"In the specification, ",(0,r.kt)("inlineCode",{parentName:"p"},"time_period")," (and the types ",(0,r.kt)("inlineCode",{parentName:"p"},"date"),") is described as a compound type with a start and end (or a\nstart and a duration). This complicates the implementation and brings little value to the language as one can simply\noperate on a combination of dates or date and duration directly. For this reason, we defined an algebra between the\ntemporal types and did not yet implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"time_period"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"result (operators)"),(0,r.kt)("th",{parentName:"tr",align:null},"date"),(0,r.kt)("th",{parentName:"tr",align:null},"duration"),(0,r.kt)("th",{parentName:"tr",align:null},"number"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"date")),(0,r.kt)("td",{parentName:"tr",align:null},"n/a"),(0,r.kt)("td",{parentName:"tr",align:null},"date (+, -)"),(0,r.kt)("td",{parentName:"tr",align:null},"n/a")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"duration")),(0,r.kt)("td",{parentName:"tr",align:null},"date (+, -)"),(0,r.kt)("td",{parentName:"tr",align:null},"duration (+, -)"),(0,r.kt)("td",{parentName:"tr",align:null},"duration (","*",")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"number")),(0,r.kt)("td",{parentName:"tr",align:null},"n/a"),(0,r.kt)("td",{parentName:"tr",align:null},"duration (","*",")"),(0,r.kt)("td",{parentName:"tr",align:null},"n/a")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"period_indicator")," function relies on period-awareness for types that are not defined enough at the moment to\nbe implemented."),(0,r.kt)("h4",{id:"java-mapping"},"Java mapping"),(0,r.kt)("p",null,"The VTL type ",(0,r.kt)("inlineCode",{parentName:"p"},"date")," is represented internally as the\ntypes ",(0,r.kt)("a",{parentName:"p",href:"https://docs.oracle.com/en%2Fjava%2Fjavase%2F11%2Fdocs%2Fapi%2F%2F/java.base/java/time/Instant.html"},(0,r.kt)("inlineCode",{parentName:"a"},"java.time.Instant")),",\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.oracle.com/en%2Fjava%2Fjavase%2F11%2Fdocs%2Fapi%2F%2F/java.base/java/time/ZonedDateTime.html"},(0,r.kt)("inlineCode",{parentName:"a"},"java.time.ZonedDateTime")),"\nand ",(0,r.kt)("a",{parentName:"p",href:"https://docs.oracle.com/en%2Fjava%2Fjavase%2F11%2Fdocs%2Fapi%2F%2F/java.base/java/time/OffsetDateTime.html#:~:text=OffsetDateTime%20is%20an%20immutable%20representation,be%20stored%20in%20an%20OffsetDateTime%20."},(0,r.kt)("inlineCode",{parentName:"a"},"java.time.OffsetDateTime"))),(0,r.kt)("p",null,"Instant represent a specific moment in time. Note that this type does not include timezone information and is therefore\nnot usable with all the operators. One can use the types ",(0,r.kt)("inlineCode",{parentName:"p"},"ZonedDateTime")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"OffsetDateTime")," when timezone or time\nsaving is required."),(0,r.kt)("p",null,"The VTL type ",(0,r.kt)("inlineCode",{parentName:"p"},"duration")," is represented internally as the\ntype ",(0,r.kt)("a",{parentName:"p",href:"https://www.threeten.org/threeten-extra/apidocs/org.threeten.extra/org/threeten/extra/PeriodDuration.html"},(0,r.kt)("inlineCode",{parentName:"a"},"org.threeten.extra.PeriodDuration")),"\nfrom the ",(0,r.kt)("a",{parentName:"p",href:"https://www.threeten.org/threeten-extra/"},"threeten extra")," package.\nIt represents a duration using both calendar units (years, months, days) and a temporal amount (hours, minutes, seconds\nand nanoseconds)."),(0,r.kt)("h4",{id:"function-flow_to_stock"},"Function ",(0,r.kt)("inlineCode",{parentName:"h4"},"flow_to_stock")),(0,r.kt)("p",null,"The flow_to_stock function converts a data set with flow interpretation into a stock interpretation. This transformation\nis useful when you want to aggregate flow data (e.g., sales or production rates) into cumulative stock data (e.g., total\ninventory)."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax:")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"result := flow_to_stock(op)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"op")," - The input data set with flow interpretation. The data set must have an identifier of type ",(0,r.kt)("inlineCode",{parentName:"li"},"time"),", additional\nidentifiers, and at least one measure of type ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Result:")),(0,r.kt)("p",null,"The function returns a data set with the same structure as the input, but with the values converted to stock\ninterpretation."),(0,r.kt)("h4",{id:"function-stock_to_flow"},"Function ",(0,r.kt)("inlineCode",{parentName:"h4"},"stock_to_flow")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"stock_to_flow")," function converts a data set with stock interpretation into a flow interpretation. This\ntransformation is useful when you want to derive flow data from cumulative stock data."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax:")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"result := stock_to_flow(op)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"op")," - The input data set with stock interpretation. The data set must have an identifier of type ",(0,r.kt)("inlineCode",{parentName:"li"},"time"),", additional\nidentifiers, and at least one measure of type ",(0,r.kt)("inlineCode",{parentName:"li"},"number"),".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Result:")),(0,r.kt)("p",null,"The function returns a data set with the same structure as the input, but with the values converted to flow\ninterpretation."),(0,r.kt)("h4",{id:"function-timeshift"},"Function ",(0,r.kt)("inlineCode",{parentName:"h4"},"timeshift")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"timeshift")," function shifts the time component of a specified range of time in the data set. This is useful for\nanalyzing data at different time offsets, such as comparing current values to past values."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Syntax:")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"result := timeshift(op, shiftNumber)")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Parameters:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"op")," - The operand data set containing time series."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"shiftNumber")," - An integer representing the number of periods to shift. Positive values shift forward in time, while\nnegative values shift backward.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Result:")),(0,r.kt)("p",null,"The function returns a data set with the time identifiers shifted by the specified number of periods."))}d.isMDXComponent=!0}}]);