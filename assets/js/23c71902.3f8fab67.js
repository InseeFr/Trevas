"use strict";(self.webpackChunktrevas_documentation=self.webpackChunktrevas_documentation||[]).push([[200],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var m=a.createContext({}),l=function(e){var t=a.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},d=function(e){var t=l(e.components);return a.createElement(m.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,m=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(r),u=n,f=p["".concat(m,".").concat(u)]||p[u]||c[u]||i;return r?a.createElement(f,o(o({ref:t},d),{},{components:r})):a.createElement(f,o({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=u;var s={};for(var m in t)hasOwnProperty.call(t,m)&&(s[m]=t[m]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7255:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=r(7462),n=(r(7294),r(3905));const i={id:"index-grammar",title:"Modifications of VTL grammar",sidebar_label:"Modifications of VTL grammar",slug:"/administrator-guide/grammar",custom_edit_url:null},o=void 0,s={unversionedId:"administrator-guide/grammar/index-grammar",id:"administrator-guide/grammar/index-grammar",title:"Modifications of VTL grammar",description:"Usage of the VTL grammar",source:"@site/docs/administrator-guide/grammar/index-grammar.mdx",sourceDirName:"administrator-guide/grammar",slug:"/administrator-guide/grammar",permalink:"/Trevas/administrator-guide/grammar",draft:!1,editUrl:null,tags:[],version:"current",lastUpdatedAt:1686228782,formattedLastUpdatedAt:"Jun 8, 2023",frontMatter:{id:"index-grammar",title:"Modifications of VTL grammar",sidebar_label:"Modifications of VTL grammar",slug:"/administrator-guide/grammar",custom_edit_url:null},sidebar:"docs",previous:{title:"Others",permalink:"/Trevas/developer-guide/spark-mode/data-sources/others"}},m={},l=[{value:"Usage of the VTL grammar",id:"usage-of-the-vtl-grammar",level:2},{value:"Adaptations of the grammar",id:"adaptations-of-the-grammar",level:3},{value:"Simplification of the grammatical tree",id:"simplification-of-the-grammatical-tree",level:4},{value:"Addition of distance operators",id:"addition-of-distance-operators",level:4}],d={toc:l};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"usage-of-the-vtl-grammar"},"Usage of the VTL grammar"),(0,n.kt)("p",null,"Trevas on the VTL formal grammar expressed with ",(0,n.kt)("a",{parentName:"p",href:"https://fr.wikipedia.org/wiki/Extended_Backus-Naur_Form"},"EBNF"),". The reference is the version 2.0 upgrade published in July 2020 ",(0,n.kt)("a",{parentName:"p",href:"https://sdmx.org/wp-content/uploads/VTL-2.0-EBNF-Grammar-2020-07.zip"},"on the SDMX web site"),"."),(0,n.kt)("p",null,"The grammar consists of two files ready to be processed by the ",(0,n.kt)("a",{parentName:"p",href:"https://www.antlr.org/"},"Antlr")," parser generator:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/InseeFr/Trevas/blob/master/vtl-parser/src/main/antlr4/fr/insee/vtl/parser/VtlTokens.g4"},"VtlTokens.g4")," contains the list of valid VTL terms.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("a",{parentName:"p",href:"https://github.com/InseeFr/Trevas/blob/master/vtl-parser/src/main/antlr4/fr/insee/vtl/parser/Vtl.g4"},"Vtl.g4")," contains the rules that produce valid VTL expressions."))),(0,n.kt)("p",null,"Antlr uses these files to produce a lexer that creates a list of vocabulary symbols from an input character stream, and a parser that creates the grammatical structure corresponding to this list of symbols. Antlr can generate parsers usable in different target languages. Trevas uses the Java parser, which is exposed in the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/InseeFr/Trevas/tree/master/vtl-parser"},(0,n.kt)("inlineCode",{parentName:"a"},"vtl-parser"))," module."),(0,n.kt)("h3",{id:"adaptations-of-the-grammar"},"Adaptations of the grammar"),(0,n.kt)("p",null,"In order to improve performance and functionalities, minor modifications were made to the VTL grammar used in Trevas."),(0,n.kt)("h4",{id:"simplification-of-the-grammatical-tree"},"Simplification of the grammatical tree"),(0,n.kt)("p",null,"As documented ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/VTL-Community/VTL-Community/issues/5"},"here")," and ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/InseeFr/Trevas-JS/issues/40"},"here"),", the ",(0,n.kt)("inlineCode",{parentName:"p"},"expr")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"exprComp")," branches of the grammatical tree are nearly identical. In order to avoid implementing the same logic twice, the ",(0,n.kt)("inlineCode",{parentName:"p"},"exprComp")," branch was commented out in the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/InseeFr/Trevas/commit/498c1f8be39702fbcfc89a3144ac1842d7771d93"},"498c1f8")," commit. It was then noticed that this modification wrongly invalidated the ",(0,n.kt)("inlineCode",{parentName:"p"},"COUNT()")," expression, and the corresponding rule was therefore reactivated in the grammar with the ","[54f86f2]"," (",(0,n.kt)("a",{parentName:"p",href:"https://github.com/InseeFr/Trevas/commit/54f86f27d2e8fdd57df1439d74ed56d225064a7d"},"https://github.com/InseeFr/Trevas/commit/54f86f27d2e8fdd57df1439d74ed56d225064a7d"),") commit."),(0,n.kt)("h4",{id:"addition-of-distance-operators"},"Addition of distance operators"),(0,n.kt)("p",null,"Distance operators like Levenshtein of Jaro-Winkler are commonly used in tests of character strings. In order to allow them in VTL expressions, the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/InseeFr/Trevas/commit/036dc6055240a38c19be7afd1d3067e370353f9f"},"036dc60")," commit added to the grammar a ",(0,n.kt)("inlineCode",{parentName:"p"},"distanceOperators")," section containing a ",(0,n.kt)("inlineCode",{parentName:"p"},"LEVENSHTEIN")," rule, as well as the ",(0,n.kt)("inlineCode",{parentName:"p"},"LEVENSHTEIN")," symbol in the lexer file."))}p.isMDXComponent=!0}}]);