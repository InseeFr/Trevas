[{"title":"Trevas Batch 0.1.1","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/blog/trevas-batch-0.1.1","content":"","keywords":"","version":null},{"title":"Launch​","type":1,"pageTitle":"Trevas Batch 0.1.1","url":"/Trevas/zh-CN/blog/trevas-batch-0.1.1#launch","content":"Local​ java -jar trevas-batch-0.1.1.jar -Dconfig.path=&quot;...&quot; -Dreport.path=&quot;...&quot;  The java execution will be done in local Spark. Kubernetes​ Default Kubernetes objects are defined in the .kubernetes folder. Feed the config-map.yml file then launch the job in your cluster. ","version":null,"tagName":"h3"},{"title":"Trevas Jupyter 0.3.2","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/blog/trevas-jupyter-0.3.2","content":"","keywords":"","version":null},{"title":"News​","type":1,"pageTitle":"Trevas Jupyter 0.3.2","url":"/Trevas/zh-CN/blog/trevas-jupyter-0.3.2#news","content":"In addition to the VTL coverage greatly increased since the publication of Trevas 1.x.x, Trevas Jupyter offers 1 new connector: SAS files (via the loadSas method) ","version":null,"tagName":"h3"},{"title":"Launch​","type":1,"pageTitle":"Trevas Jupyter 0.3.2","url":"/Trevas/zh-CN/blog/trevas-jupyter-0.3.2#launch","content":"Manually adding the Trevas Kernel to an existing Jupyter instance​ Trevas Jupyter compilerCopy the kernel.json file and the bin and repo folders to a new kernel folder.Edit the kernel.json fileLaunch Jupyter Docker​ docker pull inseefrlab/trevas-jupyter:0.3.2 docker run -p 8888:8888 inseefrlab/trevas-jupyter:0.3.2  Helm​ The Trevas Jupyter docker image can be instantiated via the jupyter-pyspark Helm contract from InseeFrLab. ","version":null,"tagName":"h3"},{"title":"Trevas Lab 0.3.3","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/blog/trevas-lab-0.3.3","content":"","keywords":"","version":null},{"title":"News​","type":1,"pageTitle":"Trevas Lab 0.3.3","url":"/Trevas/zh-CN/blog/trevas-lab-0.3.3#news","content":"In addition to the VTL coverage greatly increased since the publication of Trevas 1.x.x, Trevas Lab offers 2 new connectors: SAS filesJDBC MariaDB ","version":null,"tagName":"h3"},{"title":"Launch​","type":1,"pageTitle":"Trevas Lab 0.3.3","url":"/Trevas/zh-CN/blog/trevas-lab-0.3.3#launch","content":"Kubernetes​ Sample Kubernetes objects are available in the .kubernetes folders of Trevas Lab and Trevas Lab UI. ","version":null,"tagName":"h3"},{"title":"VTL语法的修改","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/administrator-guide/grammar","content":"","keywords":"","version":"下一个"},{"title":"Utilisation de la grammaire VTL​","type":1,"pageTitle":"VTL语法的修改","url":"/Trevas/zh-CN/administrator-guide/grammar#utilisation-de-la-grammaire-vtl","content":"Trevas s'appuie sur la grammaire formelle de VTL exprimée sous forme EBNF. La référence est l'upgrade de la version 2.0 publiée en juillet 2020 sur le site web SDMX. La grammaire consiste en deux fichiers prêts à être traités par le générateur de parseurs Antlr : VtlTokens.g4 contient la liste des termes VTL valides. Vtl.g4 contient les règles qui créent les expressions VTL valides. Antlr utilise ces fichiers pour produire un lexeur, qui crée une liste de symboles du vocabulaire à partir d'un flot de caractères en entrée, et un parseur, qui crée la structure grammaticale correspondant à cette liste de symboles. Antlr peut générer des parseurs utilisables dans différents langages cibles. Trevas utilise le parseur pour Java, qui est exposé dans le module vtl-parser. ","version":"下一个","tagName":"h2"},{"title":"Adaptations de la grammaire​","type":1,"pageTitle":"VTL语法的修改","url":"/Trevas/zh-CN/administrator-guide/grammar#adaptations-de-la-grammaire","content":"Afin d'améliorer les performances et les fonctionnalités, des modifications mineures ont été faites à la grammaire VTL grammar utilisée dans Trevas. Simplification de l'arbre grammatical​ Comme documenté ici et ici, les branches expr et exprComp de l'arbre grammatical sont presques identiques. Afin d'éviter d'avoir à implémenter deux fois la même logique, la branche exprComp a été mise en commentaires par le commit 498c1f8. Il fut remarqué par la suite que cette modification invalidait à tort l'expression COUNT() expression, et la règle correspondante fut donc réintroduite dans la grammaire par le commit [54f86f2] (https://github.com/InseeFr/Trevas/commit/54f86f27d2e8fdd57df1439d74ed56d225064a7d). Addition d'opérateurs de distance​ Les opérateurs de distances tels que Levenshtein ou Jaro-Winkler sont communément utilisés dans les tests sur les chaînes de caractères. Afin de les autoriser dans les expressions VTL, le commit 036dc60 a ajouté dans la grammaire une section distanceOperators contenant une règle LEVENSHTEIN, ainsi que le symbole LEVENSHTEIN dans le fichier du lexeur. ","version":"下一个","tagName":"h3"},{"title":"Developer guide","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide","content":"","keywords":"","version":"下一个"},{"title":"Importer le moteur Trevas​","type":1,"pageTitle":"Developer guide","url":"/Trevas/zh-CN/developer-guide#importer-le-moteur-trevas","content":"&lt;dependency&gt; &lt;groupId&gt;fr.insee.trevas&lt;/groupId&gt; &lt;artifactId&gt;vtl-engine&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt;  ","version":"下一个","tagName":"h3"},{"title":"Instancier le moteur Trevas​","type":1,"pageTitle":"Developer guide","url":"/Trevas/zh-CN/developer-guide#instancier-le-moteur-trevas","content":"// Start engine ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;vtl&quot;); // Add input bindings to engine Bindings bindings = new SimpleBindings(); bindings.put(&quot;a&quot;, 1); engine.setBindings(b, ScriptContext.ENGINE_SCOPE); // Execute script try { engine.eval(&quot;b := a + 1;&quot;); } catch (VtlScriptException e) { logger.warn(&quot;Eval failed: &quot;, e); } // Get result Long result = (Long) engine.getBindings(ScriptContext.ENGINE_SCOPE).get(&quot;b&quot;);  ","version":"下一个","tagName":"h3"},{"title":"Mode d'exécution​","type":1,"pageTitle":"Developer guide","url":"/Trevas/zh-CN/developer-guide#mode-dexécution","content":"Basic mode Spark mode ","version":"下一个","tagName":"h3"},{"title":"基本模式","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/basic-mode","content":"","keywords":"","version":"下一个"},{"title":"InMemoryDataset​","type":1,"pageTitle":"基本模式","url":"/Trevas/zh-CN/developer-guide/basic-mode#inmemorydataset","content":"Les datasets InMemoryDataset permettent de représenter les tables statistiques dans une application Java. ","version":"下一个","tagName":"h3"},{"title":"Exemple​","type":1,"pageTitle":"基本模式","url":"/Trevas/zh-CN/developer-guide/basic-mode#exemple","content":"ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;vtl&quot;); Bindings bindings = new SimpleBindings(); InMemoryDataset dataset = new InMemoryDataset( List.of( Map.of(&quot;var1&quot;, &quot;x&quot;, &quot;var2&quot;, &quot;y&quot;, &quot;var3&quot;, 5), Map.of(&quot;var1&quot;, &quot;xx&quot;, &quot;var2&quot;, &quot;yy&quot;, &quot;var3&quot;, 10) ), Map.of(&quot;var1&quot;, String.class, &quot;var2&quot;, String.class, &quot;var3&quot;, Long.class), Map.of(&quot;var1&quot;, Role.IDENTIFIER, &quot;var2&quot;, Role.ATTRIBUTE, &quot;var3&quot;, Role.MEASURE) ); bindings.put(&quot;myDataset&quot;, dataset); engine.getContext().setBindings(bindings, ScriptContext.ENGINE_SCOPE); String script = &quot;res := myDataset[filter var3 &gt; 6];&quot;; try { engine.eval(script); } catch (ScriptException e) { e.printStackTrace(); } Bindings outputBindings = engine.getContext().getBindings(ScriptContext.ENGINE_SCOPE); InMemoryDataset result = (InMemoryDataset) outputBindings.get(&quot;res&quot;); System.out.println(result.getDataPoints().size()); // 1  ","version":"下一个","tagName":"h3"},{"title":"基本模式 - 数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources","content":"","keywords":"","version":"下一个"},{"title":"Bonnes pratiques Trevas​","type":1,"pageTitle":"基本模式 - 数据源","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources#bonnes-pratiques-trevas","content":"Le format JSON est le seul permettant de stocker et gérer les métadonnées VTL lorsque le moteur Trevas est instancié en mode de base. Il est donc fortement conseillé d'utiliser ce format. JDBC JSON Others ","version":"下一个","tagName":"h3"},{"title":"基本模式 - JSON 数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/json","content":"","keywords":"","version":"下一个"},{"title":"Importer le module jackson de Trevas​","type":1,"pageTitle":"基本模式 - JSON 数据源","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/json#importer-le-module-jackson-de-trevas","content":"&lt;dependency&gt; &lt;groupId&gt;fr.insee.trevas&lt;/groupId&gt; &lt;artifactId&gt;vtl-jackson&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt;  ","version":"下一个","tagName":"h3"},{"title":"Schéma​","type":1,"pageTitle":"基本模式 - JSON 数据源","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/json#schéma","content":"La représentation JSON d'un Dataset est définie ainsi : { &quot;dataStructure&quot;: [ { &quot;name&quot;: &quot;id&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;role&quot;: &quot;IDENTIFIER&quot; }, { &quot;name&quot;: &quot;x&quot;, &quot;type&quot;: &quot;INTEGER&quot;, &quot;role&quot;: &quot;MEASURE&quot; }, { &quot;name&quot;: &quot;y&quot;, &quot;type&quot;: &quot;FLOAT&quot;, &quot;role&quot;: &quot;MEASURE&quot; } ], &quot;dataPoints&quot;: [ [&quot;0001&quot;, 10, 50.5], [&quot;0002&quot;, 20, -8], [&quot;0003&quot;, 1000, 0], [&quot;0004&quot;, 1, 4.5] ] }  ","version":"下一个","tagName":"h3"},{"title":"Utilisation du module vtl-jackson​","type":1,"pageTitle":"基本模式 - JSON 数据源","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/json#utilisation-du-module-vtl-jackson","content":"Déclaration globale​ Le module peut être déclaré globalement à l'échelle du projet client. public ObjectMapper objectMapper() { return new ObjectMapper() .registerModule(new TrevasModule()); }  Exemple de désérialisation​ ObjectMapper objectMapper = new ObjectMapper(); objectMapper.readValue(json, Dataset.class);  ","version":"下一个","tagName":"h3"},{"title":"基本模式 - JDBC 数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/jdbc","content":"","keywords":"","version":"下一个"},{"title":"Importer le module JDBC de Trevas​","type":1,"pageTitle":"基本模式 - JDBC 数据源","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/jdbc#importer-le-module-jdbc-de-trevas","content":"&lt;dependency&gt; &lt;groupId&gt;fr.insee.trevas&lt;/groupId&gt; &lt;artifactId&gt;vtl-jdbc&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt;  ","version":"下一个","tagName":"h3"},{"title":"Utilisation du module vtl-jdbc​","type":1,"pageTitle":"基本模式 - JDBC 数据源","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/jdbc#utilisation-du-module-vtl-jdbc","content":"connection = DriverManager.getConnection(...); Statement statement = connection.createStatement(); JDBCDataset jdbcDataset = new JDBCDataset(() -&gt; { try { return statement.executeQuery(&quot;select * from ds1;&quot;); } catch (SQLException se) { throw new RuntimeException(se); } });  ","version":"下一个","tagName":"h3"},{"title":"基本模式 - 其它数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/others","content":"","keywords":"","version":"下一个"},{"title":"Constructeur InMemoryDataset​","type":1,"pageTitle":"基本模式 - 其它数据源","url":"/Trevas/zh-CN/developer-guide/basic-mode/data-sources/others#constructeur-inmemorydataset","content":"InMemoryDataset dataset = new InMemoryDataset( List.of( Map.of(&quot;var1&quot;, &quot;x&quot;, &quot;var2&quot;, &quot;y&quot;, &quot;var3&quot;, 5), Map.of(&quot;var1&quot;, &quot;xx&quot;, &quot;var2&quot;, &quot;yy&quot;, &quot;var3&quot;, 10) ), Map.of(&quot;var1&quot;, String.class, &quot;var2&quot;, String.class, &quot;var3&quot;, Long.class), Map.of(&quot;var1&quot;, Role.IDENTIFIER, &quot;var2&quot;, Role.ATTRIBUTE, &quot;var3&quot;, Role.MEASURE) );  ","version":"下一个","tagName":"h3"},{"title":"Spark 模式 - 数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources","content":"","keywords":"","version":"下一个"},{"title":"Trevas 良好做法​","type":1,"pageTitle":"Spark 模式 - 数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources#trevas-良好做法","content":"当 Trevas 引擎在 Spark 模式下运行时，Apache Parquet 格式是唯一允许存储和管理 VTL 元数据的格式。 因此强烈建议使用`Apache Parquet`这种格式。 ","version":"下一个","tagName":"h3"},{"title":"例子​","type":1,"pageTitle":"Spark 模式 - 数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources#例子","content":"Apache Parquet CSV JDBC Others ","version":"下一个","tagName":"h3"},{"title":"Spark 模式","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/spark-mode","content":"","keywords":"","version":"下一个"},{"title":"SparkDataset​","type":1,"pageTitle":"Spark 模式","url":"/Trevas/zh-CN/developer-guide/spark-mode#sparkdataset","content":"Les datasets SparkDataset permettent de représenter les tables statistiques dans une application Java utilisant Trevas en mode Spark. ","version":"下一个","tagName":"h3"},{"title":"Importer le module Spark de Trevas​","type":1,"pageTitle":"Spark 模式","url":"/Trevas/zh-CN/developer-guide/spark-mode#importer-le-module-spark-de-trevas","content":"&lt;dependency&gt; &lt;groupId&gt;fr.insee.trevas&lt;/groupId&gt; &lt;artifactId&gt;vtl-spark&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt;  ","version":"下一个","tagName":"h3"},{"title":"Session Spark​","type":1,"pageTitle":"Spark 模式","url":"/Trevas/zh-CN/developer-guide/spark-mode#session-spark","content":"Afin d'exécuter du VTL via Trevas en mode Spark, il faut instancier une session Spark. La session peut être : locale (exécution sur le serveur Java)statique (exécution sur une instance Spark préalablement installée sur un serveur)dynamique (exécution dynamique au sein d'un cluster Kubernetes) SparkSession spark = SparkSession.builder().master(&quot;local&quot;).getOrCreate();  ","version":"下一个","tagName":"h3"},{"title":"Exemple​","type":1,"pageTitle":"Spark 模式","url":"/Trevas/zh-CN/developer-guide/spark-mode#exemple","content":"ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;vtl&quot;); Bindings bindings = new SimpleBindings(); SparkDataset dataset = new SparkDataset(spark.read().parquet(&quot;folder_path&quot;)); bindings.put(&quot;myDataset&quot;, dataset); engine.getContext().setBindings(bindings, ScriptContext.ENGINE_SCOPE); engine.put(&quot;$vtl.engine.processing_engine_names&quot;, &quot;spark&quot;); engine.put(&quot;$vtl.spark.session&quot;, spark); String script = &quot;res := myDataset[filter var3 &gt; 6];&quot;; try { engine.eval(script); } catch (ScriptException e) { e.printStackTrace(); } Bindings outputBindings = engine.getContext().getBindings(ScriptContext.ENGINE_SCOPE); SparkDataset result = (SparkDataset) outputBindings.get(&quot;res&quot;); // Ensure direct resolution because of spark lazy mechanism (performance warning!) InMemoryDataset imResult = new InMemoryDataset( result.getDataPoints(), result.getDataStructure() );  ","version":"下一个","tagName":"h3"},{"title":"Exécution distribuée​","type":1,"pageTitle":"Spark 模式","url":"/Trevas/zh-CN/developer-guide/spark-mode#exécution-distribuée","content":"Que ce soit en mode statique ou dynamique, l'éxecution distribuée des traitements nécessite que les exécuteurs instanciés par le master soient en capacité de résoudre les traitements VTL. Il faut alors fournir les jar Trevas aux exécuteurs via l'options spark.jars de l'objet SparkConf : SparkSession.Builder sparkBuilder = SparkSession.builder() SparkConf conf = new SparkConf(); conf.set(&quot;spark.jars&quot;, String.join(&quot;,&quot;, &quot;/vtl-spark.jar&quot;, &quot;/vtl-model.jar&quot;, &quot;/vtl-parser.jar&quot;, &quot;/vtl-engine.jar&quot;, )); sparkBuilder.config(conf); ... SparkSession spark = sparkBuilder.getOrCreate();  ","version":"下一个","tagName":"h3"},{"title":"Exécution dans un cluster Kubernetes​","type":1,"pageTitle":"Spark 模式","url":"/Trevas/zh-CN/developer-guide/spark-mode#exécution-dans-un-cluster-kubernetes","content":"De nombreuses options sont détaillées dans la documentation officielle Parmi celles-ci, une option est particulièrement importante : l'image Docker qui permettra au exécuteurs de résoudre les traitements VTL. Une image à façon est disponible ici. SparkSession.Builder sparkBuilder = SparkSession.builder() SparkConf conf = new SparkConf(); conf.set(&quot;spark.kubernetes.container.image&quot;, &quot;inseefrlab/spark-hadoop:trevas-0.4.7-spark-3.2.1-hadoop-3.3.1-postgresql-42.3.3-postgis-2021.1.0&quot;); conf.set(&quot;spark.kubernetes.container.pullPolicy&quot;, &quot;IfNotPresent&quot;); sparkBuilder.config(conf); sparkBuilder.master(&quot;k8s://...&quot;) ... SparkSession spark = sparkBuilder.getOrCreate();  ","version":"下一个","tagName":"h3"},{"title":"Spark 模式 - JDBC数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/jdbc","content":"","keywords":"","version":"下一个"},{"title":"读取 JDBC 数据源​","type":1,"pageTitle":"Spark 模式 - JDBC数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/jdbc#读取-jdbc-数据源","content":"Dataset&lt;Row&gt; sparkDataset = spark.read() .format(&quot;jdbc&quot;) .option(&quot;url&quot;, &quot;myUrl&quot;) .option(&quot;user&quot;, &quot;myUser&quot;) .option(&quot;password&quot;, &quot;myPwd&quot;) .option(&quot;query&quot;, &quot;myQuery&quot;) .option(&quot;driver&quot;, &quot;org.postgresql.Driver&quot;) .load(); SparkDataset dataset = new SparkDataset(sparkDataset);  在下面的例子中，项目必须包含 postgresql Driver 的依赖 &lt;dependency&gt; &lt;groupId&gt;org.postgresql&lt;/groupId&gt; &lt;artifactId&gt;postgresql&lt;/artifactId&gt; &lt;version&gt;42.5.1&lt;/version&gt; &lt;/dependency&gt;  查看所有支持的选项 官方文档. ","version":"下一个","tagName":"h3"},{"title":"写入​","type":1,"pageTitle":"Spark 模式 - JDBC数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/jdbc#写入","content":"不建议使用 jdbc 格式来编写 Trevas 的Dataset (请看 这里) ","version":"下一个","tagName":"h3"},{"title":"Spark模式 - CSV 数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/csv","content":"","keywords":"","version":"下一个"},{"title":"读取 csv 数据源​","type":1,"pageTitle":"Spark模式 - CSV 数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/csv#读取-csv-数据源","content":"Dataset&lt;Row&gt; sparkDataset = spark.read() .option(&quot;delimiter&quot;, &quot;;&quot;) .option(&quot;header&quot;, &quot;true&quot;) .csv(&quot;folder_path&quot;); SparkDataset dataset = new SparkDataset(sparkDataset);  查看所有支持的选项 官方文档. ","version":"下一个","tagName":"h3"},{"title":"写入​","type":1,"pageTitle":"Spark模式 - CSV 数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/csv#写入","content":"不建议使用 CSV 格式来编写 Trevas Dataset (请看 这里) ","version":"下一个","tagName":"h3"},{"title":"Spark 模式 - 其它数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/others","content":"","keywords":"","version":"下一个"},{"title":"Constructeur SparkDataset​","type":1,"pageTitle":"Spark 模式 - 其它数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/others#constructeur-sparkdataset","content":"StructType schema = DataTypes.createStructType(List.of( DataTypes.createStructField(&quot;string&quot;, DataTypes.StringType, false), DataTypes.createStructField(&quot;integer&quot;, DataTypes.LongType, false), DataTypes.createStructField(&quot;boolean&quot;, DataTypes.BooleanType, false), DataTypes.createStructField(&quot;float&quot;, DataTypes.DoubleType, false) )); Dataset&lt;Row&gt; dataFrame = spark.createDataFrame(List.of( RowFactory.create(&quot;string&quot;, 1L, true, 1.5D) ), schema); fr.insee.vtl.model.Dataset sparkDataset = new SparkDataset(dataFrame);  ","version":"下一个","tagName":"h3"},{"title":"Spark 支持的其他数据格式​","type":1,"pageTitle":"Spark 模式 - 其它数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/others#spark-支持的其他数据格式","content":"请看 官方文档 ","version":"下一个","tagName":"h3"},{"title":"Trevas","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/introduction","content":"","keywords":"","version":"下一个"},{"title":"什么是 VTL？​","type":1,"pageTitle":"Trevas","url":"/Trevas/zh-CN/introduction#什么是-vtl","content":"面向统计学家的商业、逻辑级和用户友好的语言依赖于标准结构元数据可互操作，与平台无关函数式语言，支持数据沿袭以获得更多洞察力和可重复性 ","version":"下一个","tagName":"h2"},{"title":"Trevas 生态系统​","type":1,"pageTitle":"Trevas","url":"/Trevas/zh-CN/introduction#trevas-生态系统","content":" Trevas JupyterTrevas LabTrevas Lab APITrevas Batch ","version":"下一个","tagName":"h2"},{"title":"技术说明​","type":1,"pageTitle":"Trevas","url":"/Trevas/zh-CN/introduction#技术说明","content":"Trevas 项目在各种运行环境下提供 VTL 引擎，包括 Java 11 引擎和 Apache Spark引擎. Trevas 的引擎是基于JSR 223规范，该规范描述了 Java 中脚本语言的使用 ","version":"下一个","tagName":"h2"},{"title":"Spark 模式 - Parquet 数据源","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/parquet","content":"","keywords":"","version":"下一个"},{"title":"元数据​","type":1,"pageTitle":"Spark 模式 - Parquet 数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/parquet#元数据","content":"Parquet 数据集的元数据是从 parquet 的架构中推断出来的 数据类型​ Trevas 引擎负责在 Parquet 数据类型和 Trevas 支持的数据类型之间进行转换。 数据角色​ VTL 的数据角色由 Trevas 引擎添加到 Parquet 数据集中，方法是向每个字段描述添加元数据“vtlRole”。 在默认情况下，所有 Parquet 数据集中没有角色的列将在 Trevas 中具有角色“MEASURE”。 VTL 允许数据角色在脚本中进行演变 (请看 这里) ","version":"下一个","tagName":"h3"},{"title":"读取​","type":1,"pageTitle":"Spark 模式 - Parquet 数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/parquet#读取","content":"Dataset&lt;Row&gt; sparkDataset = spark.read().parquet(&quot;folder_path&quot;); SparkDataset dataset = new SparkDataset(sparkDataset);  ","version":"下一个","tagName":"h3"},{"title":"写入​","type":1,"pageTitle":"Spark 模式 - Parquet 数据源","url":"/Trevas/zh-CN/developer-guide/spark-mode/data-sources/parquet#写入","content":"// Trevas Spark Dataset SparkDataset dataset = ...; // Spark Dataset Dataset&lt;Row&gt; sparkDataset = dataset.getSparkDataset(); sparkDataset.write() .mode(SaveMode.Overwrite) .parquet(&quot;folder_path&quot;);  ","version":"下一个","tagName":"h3"},{"title":"Trevas 模组","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/modules","content":"Trevas 模组 VTL Engine Moteur d'exécution et son implémentation Java de base VTL Parser Parseur généré par Antlr à partir de la grammaire formelle de VTL 2.0 VTL Spark Exécution de transformations VTL par Spark VTL Model Modèle définissant les objets utilisés dans le moteur VTL JDBC Utilisation de sources de données SQL VTL Jackson Sérialisation / désérialisation JSON de jeux de données","keywords":"","version":"下一个"},{"title":"VTL引擎","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/modules/engine","content":"VTL引擎 运行引擎及其基本的 Java 实现。","keywords":"","version":"下一个"},{"title":"VTL JDBC模块","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/modules/jdbc","content":"VTL JDBC模块 该模块用于处理 SQL 数据源。","keywords":"","version":"下一个"},{"title":"VTL Jackson模块","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/modules/jackson","content":"VTL Jackson模块 数据集 JSON 序列化和反序列化模块","keywords":"","version":"下一个"},{"title":"VTL 数据模型模块","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/modules/model","content":"VTL 数据模型模块 定义引擎中使用的对象的模型","keywords":"","version":"下一个"},{"title":"VTL 语言解析模块","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/modules/parser","content":"VTL 语言解析模块 VTL 语言解析模块是基于VTL 2.0 形式语法，由Antlr生成的语言解析器。","keywords":"","version":"下一个"},{"title":"VTL Spark模块","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/modules/spark","content":"VTL Spark模块 Spark 模块可以用Spark执行 VTL 的数据转换.","keywords":"","version":"下一个"},{"title":"Trevas releases","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/releases","content":"Trevas releases v1.x.x","keywords":"","version":"下一个"},{"title":"Release 1.x.x","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/releases/1.x.x","content":"","keywords":"","version":"下一个"},{"title":"版本 1.0.2 - 06/30/23​","type":1,"pageTitle":"Release 1.x.x","url":"/Trevas/zh-CN/releases/1.x.x#版本-102---063023","content":"(请参阅技术发布 Github) 使用 2 种方法分割引擎方法注册：registerMethod 和 registerGlobalMethod使用 null 修复 in / not_in 错误 ","version":"下一个","tagName":"h2"},{"title":"版本 1.0.1 - 05/23/23​","type":1,"pageTitle":"Release 1.x.x","url":"/Trevas/zh-CN/releases/1.x.x#版本-101---052323","content":"(请参阅技术发布 Github) 修复 check_datapoint 实现中的 Spark 序列化问题 ","version":"下一个","tagName":"h2"},{"title":"版本 1.0.0 - 05/12/23​","type":1,"pageTitle":"Release 1.x.x","url":"/Trevas/zh-CN/releases/1.x.x#版本-100---051223","content":"(请参阅技术发布 Github) 会籍: #验证: check, check_datapoint应用于数据集的运算符 (ceil(ds), ds1 &lt; ds2, mod(ds, 5), ...) ","version":"下一个","tagName":"h2"},{"title":"Trevas VTL coverage","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage","content":"Trevas VTL coverage General purpose operators Join operators String operators Numeric operators Comparison operators Boolean operators Time operators Set operators Hierarchical aggregation Aggregate operators Analytic operators Data validation operators Conditional operators Clause operators","keywords":"","version":"下一个"},{"title":"VTL - Analytic operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/analytic-operators","content":"VTL - Analytic operators Name\tSymbol\tInMemory\tSparkAnalytic invocation ❌\t✔️ Counting the number of data points\tcount\t❌\t✔️ Minimum value\tmin\t❌\t✔️ Maximum value\tmax\t❌\t✔️ Median value\tmedian\t❌\t✔️ Sum\tsum\t❌\t✔️ Average value\tavg\t❌\t✔️ Population standard deviation\tstddev_pop\t❌\t✔️ Sample standard deviation\tstddev_samp\t❌\t✔️ Population variance\tvar_pop\t❌\t✔️ Sample variance\tvar_samp\t❌\t✔️ First value\tfirst_value\t❌\t✔️ Last value\tlast_value\t❌\t✔️ Lag\tlag\t❌\t✔️ lead\tlead\t❌\t✔️ Rank\trank\t❌\t✔️ Ratio to report\tratio_to_report\t❌\t✔️","keywords":"","version":"下一个"},{"title":"VTL - Aggregate operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/aggregate-operators","content":"VTL - Aggregate operators Name\tSymbol\tInMemory\tSparkAggregate invocation ✔️\t✔️ Counting the number of data points\tcount\t✔️\t✔️ Minimum value\tmin\t✔️\t✔️ Maximum value\tmax\t✔️\t✔️ Median value\tmedian\t✔️\t✔️ Sum\tsum\t✔️\t✔️ Average value\tavg\t✔️\t✔️ Population standard deviation\tstddev_pop\t✔️\t✔️ Sample standard deviation\tstddev_samp\t✔️\t✔️ Population variance\tvar_pop\t✔️\t✔️ Sample variance\tvar_samp\t✔️\t✔️","keywords":"","version":"下一个"},{"title":"VTL - Clause operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/clause-operators","content":"VTL - Clause operators Name\tSymbol\tInMemory\tSparkFiltering Data Points\tfilter\t✔️\t✔️ Calculation of a Component\tcalc\t✔️\t✔️ Aggregation\taggr\t❌\t✔️ Maintaining Components\tkeep\t✔️\t✔️ Removal of Components\tdrop\t✔️\t✔️ Change of Component name\trename\t✔️\t✔️ Pivoting\tpivot\t❌\t❌ Unpivoting\tunpivot\t❌\t❌ Subspace\tsub\t❌\t❌","keywords":"","version":"下一个"},{"title":"VTL - Comparison operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/comparison-operators","content":"VTL - Comparison operators Name\tSymbol\tScalar\tComponent\tDatasetEqual to\t=\t✔️\t✔️\t✔️ Not equal to\t&lt;&gt;\t✔️\t✔️\t✔️ Greater than\t&gt;\t✔️\t✔️\t✔️ Less than\t&lt;\t✔️\t✔️\t✔️ Greater or equal than\t&gt; =\t✔️\t✔️\t✔️ Less or equal than\t&lt;=\t✔️\t✔️\t✔️ Between\tbetween\t✔️\t✔️\t✔️ Element of\tin / not_in\t✔️\t✔️\t✔️ Match characters\tmatch_characters\t✔️\t✔️\t✔️ Is null\tisnull\t✔️\t✔️\t✔️ Exists in\texists_in\tN/A\tN/A\t❌","keywords":"","version":"下一个"},{"title":"VTL - Boolean operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/boolean-operators","content":"VTL - Boolean operators Name\tSymbol\tBoolean\tComponent\tDatasetLogical conjunction\tand\t✔️\t✔️\t✔️ Logical disjunction\tor\t✔️\t✔️\t✔️ Exclusive disjunction\txor\t✔️\t✔️\t✔️ Logical negation\tnot\t✔️\t✔️\t✔️","keywords":"","version":"下一个"},{"title":"VTL - Data validation operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/data-validation-operators","content":"VTL - Data validation operators Name\tSymbol\tSupportedCheck datapoint\tcheck_datapoint\t✔️ Check hierarchy\tcheck_hierarchy\t❌ Check\tcheck\t✔️","keywords":"","version":"下一个"},{"title":"VTL - Conditional operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/conditional-operators","content":"VTL - Conditional operators Name\tSymbol\tBoolean\tComponent\tDatasetIf Then Else\tif-then-else\t✔️\t✔️\t✔️ Nvl\tnvl\t✔️\t✔️\t✔️","keywords":"","version":"下一个"},{"title":"VTL - Hierarchical aggregation","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/hierarchical-aggregation","content":"VTL - Hierarchical aggregation Name\tSymbol\tInMemory\tSparkHierarchical roll-up\thierarchy\t❌\t❌","keywords":"","version":"下一个"},{"title":"VTL - General purpose operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/general-operators","content":"VTL - General purpose operators Name\tSymbol\tSupportedParentheses\t( )\t✔️ Persistent assignment\t&lt;-\t❌ Temporary assignment\t:=\t✔️ Membership\t#\t✔️ User-defined operator call ✔️ Evaluation of an external routine\teval\t❌ Type conversion (string, integer, double, boolean)\tcast\t✔️ Type conversion (others)\tcast\t❌","keywords":"","version":"下一个"},{"title":"VTL - Join operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/join-operators","content":"VTL - Join operators Name\tSymbol\tInMemory\tSparkJoin\tinner_join, left_join, full_join, cross_join\t✔️\t✔️","keywords":"","version":"下一个"},{"title":"VTL - Numeric operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/numeric-operators","content":"VTL - Numeric operators Name\tSymbol\tNumber\tComponent\tDatasetUnary plus\t+\t✔️\t✔️\t✔️ Unary minus\t-\t✔️\t✔️\t✔️ Addition\t+\t✔️\t✔️\t✔️ Subtraction\t-\t✔️\t✔️\t✔️ Multiplication\t*\t✔️\t✔️\t✔️ Division\t/\t✔️\t✔️\t✔️ Concatenation\t||\t✔️\t✔️\t✔️ Modulo\tmod\t✔️\t✔️\t✔️ Rounding\tround\t✔️\t✔️\t✔️ Truncation\ttrunc\t✔️\t✔️\t✔️ Ceiling\tceil\t✔️\t✔️\t✔️ Floor\tfloor\t✔️\t✔️\t✔️ Absolute value\tabs\t✔️\t✔️\t✔️ Exponential\texp\t✔️\t✔️\t✔️ Natural logarithm\tln\t✔️\t✔️\t✔️ Power\tpower\t✔️\t✔️\t✔️ Logarithm\tlog\t✔️\t✔️\t✔️ Square root\tsqrt\t✔️\t✔️\t✔️","keywords":"","version":"下一个"},{"title":"VTL - Set operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/set-operators","content":"VTL - Set operators Name\tSymbol\tInMemory\tSparkUnion\tunion\t❌\t✔️ Intersection\tintersect\t❌\t❌ Set difference\tsetdiff\t❌\t❌ Symmetric difference\tsymdiff\t❌\t❌","keywords":"","version":"下一个"},{"title":"VTL - String operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/string-operators","content":"VTL - String operators Name\tSymbol\tString\tComponent\tDatasetString concatenation\t||\t✔️\t✔️\t✔️ Whitespace removal\ttrim, rtrim, ltrim\t✔️\t✔️\t✔️ Character case conversion\tupper/lower\t✔️\t✔️\t✔️ Sub-string extraction\tsubstr\t✔️\t✔️\t✔️ String pattern replacement\treplace\t✔️\t✔️\t✔️ String pattern location\tinstr\t✔️\t✔️\t✔️ String length\tlength\t✔️\t✔️\t✔️","keywords":"","version":"下一个"},{"title":"VTL - Time operators","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/coverage/time-operators","content":"VTL - Time operators Name\tSymbol\tTime_period\tComponent\tDatasetPeriod indicator\tperiod_indicator\t❌\t❌\t❌ Fill time series\tfill_time_series\t❌\t❌\t❌ Flow to stock\tflow_to_stock\t❌\t❌\t❌ Stock to flow\tstock_to_flow\t❌\t❌\t❌ Time shift\ttimeshift\t❌\t❌\t❌ Time aggregation\ttime_agg\t❌\t❌\t❌ Actual time\tcurrent_date\t✔️\tN/A\tN/A","keywords":"","version":"下一个"},{"title":"Trevas client apps","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/vtl/client-apps","content":"Trevas client apps Trevas Jupyter Kernel Jupyter Trevas Lab Application web","keywords":"","version":"下一个"},{"title":"Trevas Jupyter","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/vtl/client-apps/jupyter","content":"","keywords":"","version":"下一个"},{"title":"Sources​","type":1,"pageTitle":"Trevas Jupyter","url":"/Trevas/zh-CN/user-guide/vtl/client-apps/jupyter#sources","content":"Github​ Trevas Jupyter Docker Hub​ Trevas Jupyter ","version":"下一个","tagName":"h3"},{"title":"Demo​","type":1,"pageTitle":"Trevas Jupyter","url":"/Trevas/zh-CN/user-guide/vtl/client-apps/jupyter#demo","content":"A video will be coming soon ","version":"下一个","tagName":"h3"},{"title":"VTL","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/vtl","content":"","keywords":"","version":"下一个"},{"title":"Documentation​","type":1,"pageTitle":"VTL","url":"/Trevas/zh-CN/user-guide/vtl#documentation","content":"La documentation de VTL est accessible sur le site officiel SDMX : Manuel utilisateurManuel de référence ","version":"下一个","tagName":"h2"},{"title":"Jeux de données​","type":1,"pageTitle":"VTL","url":"/Trevas/zh-CN/user-guide/vtl#jeux-de-données","content":"Les jeux de données VTL doivent être décrit par des métadonnées. Les différentes colonnes ont un type et un role. Par défaut, dans Trevas, une colonne sans type ni rôle se verra affecter le type string et le role measure. L'utilisateur aura ensuite la possibilité de muter ces attributs au sein de son script, via les opérateurs calc et cast notamment. ","version":"下一个","tagName":"h2"},{"title":"Exemple simple​","type":1,"pageTitle":"VTL","url":"/Trevas/zh-CN/user-guide/vtl#exemple-simple","content":"En considérant ds_1 définit comme suit : \tid_1\tid_2\tme_1type\tstring\tstring\tstring role\tidentifier\tidentifier\tmeasure id_1\tid_2\tme_1&quot;75001&quot;\t&quot;75&quot;\t&quot;10&quot; &quot;75002&quot;\t&quot;75&quot;\t&quot;100&quot; &quot;70001&quot;\t&quot;70&quot;\t&quot;5&quot; &quot;70002&quot;\t&quot;70&quot;\t&quot;70&quot; Pour obtenir la somme de me_1 par id_2, il faut que seul id_2 ait pour rôle identifier et que le type de me_1 soit integer. On applique donc le script suivant : ds_2 := ds_1[calc measure id_2 := id_2, me_1 := cast(me_1, integer)];  ds_2 est alors : \tid_1\tid_2\tme_1type\tstring\tstring\tinteger role\tmeasure\tidentifier\tmeasure id_1\tid_2\tme_1&quot;75001&quot;\t&quot;75&quot;\t10 &quot;75002&quot;\t&quot;75&quot;\t100 &quot;70001&quot;\t&quot;70&quot;\t5 &quot;70002&quot;\t&quot;70&quot;\t70 On peut dorénavant appliquer l'opérateur aggr : ds_3 := ds_2[aggr sum_me_1 := sum(me_1) group by id_2];  Et obtenir ds_3 : \tid_2\tsum_me_1type\tstring\tinteger role\tidentifier\tmeasure id_2\tme_1&quot;75&quot;\t110 &quot;70&quot;\t75 ","version":"下一个","tagName":"h2"},{"title":"Trevas Jupyter","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/vtl/client-apps/lab","content":"","keywords":"","version":"下一个"},{"title":"Sources​","type":1,"pageTitle":"Trevas Jupyter","url":"/Trevas/zh-CN/user-guide/vtl/client-apps/lab#sources","content":"Github​ Trevas Lab UITrevas LabTrevas Spark Hadoop Docker Hub​ Trevas Lab UITrevas LabTrevas Spark Hadoop ","version":"下一个","tagName":"h3"},{"title":"Demo​","type":1,"pageTitle":"Trevas Jupyter","url":"/Trevas/zh-CN/user-guide/vtl/client-apps/lab#demo","content":"A video will be coming soon ","version":"下一个","tagName":"h3"},{"title":"Drop","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/vtl/sas-vtl/drop","content":"Drop Sas VTL","keywords":"","version":"下一个"},{"title":"Sas vs VTL examples","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/vtl/sas-vtl","content":"Sas vs VTL examples Keep Drop Rename","keywords":"","version":"下一个"},{"title":"Keep","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/vtl/sas-vtl/keep","content":"Keep Sas VTL","keywords":"","version":"下一个"},{"title":"Rename","type":0,"sectionRef":"#","url":"/Trevas/zh-CN/user-guide/vtl/sas-vtl/rename","content":"Rename Sas VTL","keywords":"","version":"下一个"}]