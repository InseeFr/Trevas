[{"title":"Trevas Jupyter 0.3.2","type":0,"sectionRef":"#","url":"/Trevas/fr/blog/trevas-jupyter-0.3.2","content":"","keywords":"","version":null},{"title":"Nouveautés​","type":1,"pageTitle":"Trevas Jupyter 0.3.2","url":"/Trevas/fr/blog/trevas-jupyter-0.3.2#nouveautés","content":"En supplément de la couverture VTL largement augmentée depuis la publication de Trevas 1.x.x, Trevas Jupyter propose 1 nouveau connecteur : fichiers SAS (via la méthode loadSas) ","version":null,"tagName":"h3"},{"title":"Lancement​","type":1,"pageTitle":"Trevas Jupyter 0.3.2","url":"/Trevas/fr/blog/trevas-jupyter-0.3.2#lancement","content":"Ajout manuel du Kernel Trevas à une instance Jupyter existante​ Compiler Trevas JupyterCopier le fichier kernel.json et les dossiers bin et repo dans un nouveau dossier de kernel.Editer le fichier kernel.jsonLancer Jupyter Docker​ docker pull inseefrlab/trevas-jupyter:0.3.2 docker run -p 8888:8888 inseefrlab/trevas-jupyter:0.3.2  Helm​ L'image docker de Trevas Jupyter peut être instanciée via le contrat Helm jupyter-pyspark de InseeFrLab. ","version":null,"tagName":"h3"},{"title":"Trevas Lab 0.3.3","type":0,"sectionRef":"#","url":"/Trevas/fr/blog/trevas-lab-0.3.3","content":"","keywords":"","version":null},{"title":"Nouveautés​","type":1,"pageTitle":"Trevas Lab 0.3.3","url":"/Trevas/fr/blog/trevas-lab-0.3.3#nouveautés","content":"En supplément de la couverture VTL largement augmentée depuis la publication de Trevas 1.x.x, Trevas Lab propose 2 nouveaux connecteurs : fichiers SASJDBC MariaDB ","version":null,"tagName":"h3"},{"title":"Lancement​","type":1,"pageTitle":"Trevas Lab 0.3.3","url":"/Trevas/fr/blog/trevas-lab-0.3.3#lancement","content":"Kubernetes​ Des exemples d'objet Kubernetes sont disponibles dans les dossiers .kubernetes de Trevas Lab et Trevas Lab UI. ","version":null,"tagName":"h3"},{"title":"Trevas Batch 0.1.1","type":0,"sectionRef":"#","url":"/Trevas/fr/blog/trevas-batch-0.1.1","content":"","keywords":"","version":null},{"title":"Lancement​","type":1,"pageTitle":"Trevas Batch 0.1.1","url":"/Trevas/fr/blog/trevas-batch-0.1.1#lancement","content":"Local​ java -jar trevas-batch-0.1.1.jar -Dconfig.path=&quot;...&quot; -Dreport.path=&quot;...&quot;  L'exécution java se fera en Spark local. Kubernetes​ Des objets Kubernetes par défaut sont définis dans le dossier .kubernetes. Alimenter le fichier config-map.yml puis lancer le job dans votre cluster. ","version":null,"tagName":"h3"},{"title":"Modifications de la grammaire VTL","type":0,"sectionRef":"#","url":"/Trevas/fr/administrator-guide/grammar","content":"","keywords":"","version":"Next"},{"title":"Utilisation de la grammaire VTL​","type":1,"pageTitle":"Modifications de la grammaire VTL","url":"/Trevas/fr/administrator-guide/grammar#utilisation-de-la-grammaire-vtl","content":"Trevas s'appuie sur la grammaire formelle de VTL exprimée sous forme EBNF. La référence est l'upgrade de la version 2.0 publiée en juillet 2020 sur le site web SDMX. La grammaire consiste en deux fichiers prêts à être traités par le générateur de parseurs Antlr : VtlTokens.g4 contient la liste des termes VTL valides. Vtl.g4 contient les règles qui créent les expressions VTL valides. Antlr utilise ces fichiers pour produire un lexeur, qui crée une liste de symboles du vocabulaire à partir d'un flot de caractères en entrée, et un parseur, qui crée la structure grammaticale correspondant à cette liste de symboles. Antlr peut générer des parseurs utilisables dans différents langages cibles. Trevas utilise le parseur pour Java, qui est exposé dans le module vtl-parser. ","version":"Next","tagName":"h2"},{"title":"Adaptations de la grammaire​","type":1,"pageTitle":"Modifications de la grammaire VTL","url":"/Trevas/fr/administrator-guide/grammar#adaptations-de-la-grammaire","content":"Afin d'améliorer les performances et les fonctionnalités, des modifications mineures ont été faites à la grammaire VTL grammar utilisée dans Trevas. Simplification de l'arbre grammatical​ Comme documenté ici et ici, les branches expr et exprComp de l'arbre grammatical sont presques identiques. Afin d'éviter d'avoir à implémenter deux fois la même logique, la branche exprComp a été mise en commentaires par le commit 498c1f8. Il fut remarqué par la suite que cette modification invalidait à tort l'expression COUNT() expression, et la règle correspondante fut donc réintroduite dans la grammaire par le commit [54f86f2] (https://github.com/InseeFr/Trevas/commit/54f86f27d2e8fdd57df1439d74ed56d225064a7d). Addition d'opérateurs de distance​ Les opérateurs de distances tels que Levenshtein ou Jaro-Winkler sont communément utilisés dans les tests sur les chaînes de caractères. Afin de les autoriser dans les expressions VTL, le commit 036dc60 a ajouté dans la grammaire une section distanceOperators contenant une règle LEVENSHTEIN, ainsi que le symbole LEVENSHTEIN dans le fichier du lexeur. ","version":"Next","tagName":"h3"},{"title":"Guide développeur","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide","content":"","keywords":"","version":"Next"},{"title":"Importer le moteur Trevas​","type":1,"pageTitle":"Guide développeur","url":"/Trevas/fr/developer-guide#importer-le-moteur-trevas","content":"&lt;dependency&gt; &lt;groupId&gt;fr.insee.trevas&lt;/groupId&gt; &lt;artifactId&gt;vtl-engine&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt;  ","version":"Next","tagName":"h3"},{"title":"Instancier le moteur Trevas​","type":1,"pageTitle":"Guide développeur","url":"/Trevas/fr/developer-guide#instancier-le-moteur-trevas","content":"// Start engine ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;vtl&quot;); // Add input bindings to engine Bindings bindings = new SimpleBindings(); bindings.put(&quot;a&quot;, 1); engine.setBindings(b, ScriptContext.ENGINE_SCOPE); // Execute script try { engine.eval(&quot;b := a + 1;&quot;); } catch (VtlScriptException e) { logger.warn(&quot;Eval failed: &quot;, e); } // Get result Long result = (Long) engine.getBindings(ScriptContext.ENGINE_SCOPE).get(&quot;b&quot;);  ","version":"Next","tagName":"h3"},{"title":"Mode d'exécution​","type":1,"pageTitle":"Guide développeur","url":"/Trevas/fr/developer-guide#mode-dexécution","content":"Basic mode Spark mode ","version":"Next","tagName":"h3"},{"title":"Mode de base - Sources de données","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/basic-mode/data-sources","content":"","keywords":"","version":"Next"},{"title":"Bonnes pratiques Trevas​","type":1,"pageTitle":"Mode de base - Sources de données","url":"/Trevas/fr/developer-guide/basic-mode/data-sources#bonnes-pratiques-trevas","content":"Le format JSON est le seul permettant de stocker et gérer les métadonnées VTL lorsque le moteur Trevas est instancié en mode de base. Il est donc fortement conseillé d'utiliser ce format. JDBC JSON Others ","version":"Next","tagName":"h3"},{"title":"Mode de base","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/basic-mode","content":"","keywords":"","version":"Next"},{"title":"InMemoryDataset​","type":1,"pageTitle":"Mode de base","url":"/Trevas/fr/developer-guide/basic-mode#inmemorydataset","content":"Les datasets InMemoryDataset permettent de représenter les tables statistiques dans une application Java. ","version":"Next","tagName":"h3"},{"title":"Exemple​","type":1,"pageTitle":"Mode de base","url":"/Trevas/fr/developer-guide/basic-mode#exemple","content":"ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;vtl&quot;); Bindings bindings = new SimpleBindings(); InMemoryDataset dataset = new InMemoryDataset( List.of( Map.of(&quot;var1&quot;, &quot;x&quot;, &quot;var2&quot;, &quot;y&quot;, &quot;var3&quot;, 5), Map.of(&quot;var1&quot;, &quot;xx&quot;, &quot;var2&quot;, &quot;yy&quot;, &quot;var3&quot;, 10) ), Map.of(&quot;var1&quot;, String.class, &quot;var2&quot;, String.class, &quot;var3&quot;, Long.class), Map.of(&quot;var1&quot;, Role.IDENTIFIER, &quot;var2&quot;, Role.ATTRIBUTE, &quot;var3&quot;, Role.MEASURE) ); bindings.put(&quot;myDataset&quot;, dataset); engine.getContext().setBindings(bindings, ScriptContext.ENGINE_SCOPE); String script = &quot;res := myDataset[filter var3 &gt; 6];&quot;; try { engine.eval(script); } catch (ScriptException e) { e.printStackTrace(); } Bindings outputBindings = engine.getContext().getBindings(ScriptContext.ENGINE_SCOPE); InMemoryDataset result = (InMemoryDataset) outputBindings.get(&quot;res&quot;); System.out.println(result.getDataPoints().size()); // 1  ","version":"Next","tagName":"h3"},{"title":"Mode de base - Source JDBC","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/jdbc","content":"","keywords":"","version":"Next"},{"title":"Importer le module JDBC de Trevas​","type":1,"pageTitle":"Mode de base - Source JDBC","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/jdbc#importer-le-module-jdbc-de-trevas","content":"&lt;dependency&gt; &lt;groupId&gt;fr.insee.trevas&lt;/groupId&gt; &lt;artifactId&gt;vtl-jdbc&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt;  ","version":"Next","tagName":"h3"},{"title":"Utilisation du module vtl-jdbc​","type":1,"pageTitle":"Mode de base - Source JDBC","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/jdbc#utilisation-du-module-vtl-jdbc","content":"connection = DriverManager.getConnection(...); Statement statement = connection.createStatement(); JDBCDataset jdbcDataset = new JDBCDataset(() -&gt; { try { return statement.executeQuery(&quot;select * from ds1;&quot;); } catch (SQLException se) { throw new RuntimeException(se); } });  ","version":"Next","tagName":"h3"},{"title":"Mode de base - Source JSON","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/json","content":"","keywords":"","version":"Next"},{"title":"Importer le module jackson de Trevas​","type":1,"pageTitle":"Mode de base - Source JSON","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/json#importer-le-module-jackson-de-trevas","content":"&lt;dependency&gt; &lt;groupId&gt;fr.insee.trevas&lt;/groupId&gt; &lt;artifactId&gt;vtl-jackson&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt;  ","version":"Next","tagName":"h3"},{"title":"Schéma​","type":1,"pageTitle":"Mode de base - Source JSON","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/json#schéma","content":"La représentation JSON d'un Dataset est définie ainsi : { &quot;dataStructure&quot;: [ { &quot;name&quot;: &quot;id&quot;, &quot;type&quot;: &quot;STRING&quot;, &quot;role&quot;: &quot;IDENTIFIER&quot; }, { &quot;name&quot;: &quot;x&quot;, &quot;type&quot;: &quot;INTEGER&quot;, &quot;role&quot;: &quot;MEASURE&quot; }, { &quot;name&quot;: &quot;y&quot;, &quot;type&quot;: &quot;FLOAT&quot;, &quot;role&quot;: &quot;MEASURE&quot; } ], &quot;dataPoints&quot;: [ [&quot;0001&quot;, 10, 50.5], [&quot;0002&quot;, 20, -8], [&quot;0003&quot;, 1000, 0], [&quot;0004&quot;, 1, 4.5] ] }  ","version":"Next","tagName":"h3"},{"title":"Utilisation du module vtl-jackson​","type":1,"pageTitle":"Mode de base - Source JSON","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/json#utilisation-du-module-vtl-jackson","content":"Déclaration globale​ Le module peut être déclaré globalement à l'échelle du projet client. public ObjectMapper objectMapper() { return new ObjectMapper() .registerModule(new TrevasModule()); }  Exemple de désérialisation​ ObjectMapper objectMapper = new ObjectMapper(); objectMapper.readValue(json, Dataset.class);  ","version":"Next","tagName":"h3"},{"title":"Mode de base - Autres sources","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/others","content":"","keywords":"","version":"Next"},{"title":"Constructeur InMemoryDataset​","type":1,"pageTitle":"Mode de base - Autres sources","url":"/Trevas/fr/developer-guide/basic-mode/data-sources/others#constructeur-inmemorydataset","content":"InMemoryDataset dataset = new InMemoryDataset( List.of( Map.of(&quot;var1&quot;, &quot;x&quot;, &quot;var2&quot;, &quot;y&quot;, &quot;var3&quot;, 5), Map.of(&quot;var1&quot;, &quot;xx&quot;, &quot;var2&quot;, &quot;yy&quot;, &quot;var3&quot;, 10) ), Map.of(&quot;var1&quot;, String.class, &quot;var2&quot;, String.class, &quot;var3&quot;, Long.class), Map.of(&quot;var1&quot;, Role.IDENTIFIER, &quot;var2&quot;, Role.ATTRIBUTE, &quot;var3&quot;, Role.MEASURE) );  ","version":"Next","tagName":"h3"},{"title":"Mode Spark - Sources de données","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/spark-mode/data-sources","content":"","keywords":"","version":"Next"},{"title":"Bonnes pratiques Trevas​","type":1,"pageTitle":"Mode Spark - Sources de données","url":"/Trevas/fr/developer-guide/spark-mode/data-sources#bonnes-pratiques-trevas","content":"Le format Apache Parquet est le seul permettant de stocker et gérer les métadonnées VTL lorsque le moteur Trevas est instancié en mode Spark. Il est donc fortement conseillé d'utiliser ce format. ","version":"Next","tagName":"h3"},{"title":"Exemples​","type":1,"pageTitle":"Mode Spark - Sources de données","url":"/Trevas/fr/developer-guide/spark-mode/data-sources#exemples","content":"Apache Parquet CSV JDBC Others ","version":"Next","tagName":"h3"},{"title":"Mode Spark - Source CSV","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/csv","content":"","keywords":"","version":"Next"},{"title":"Lecture​","type":1,"pageTitle":"Mode Spark - Source CSV","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/csv#lecture","content":"Dataset&lt;Row&gt; sparkDataset = spark.read() .option(&quot;delimiter&quot;, &quot;;&quot;) .option(&quot;header&quot;, &quot;true&quot;) .csv(&quot;folder_path&quot;); SparkDataset dataset = new SparkDataset(sparkDataset);  Voir l'ensemble des options supportées dans la documentation officielle. ","version":"Next","tagName":"h3"},{"title":"Écriture​","type":1,"pageTitle":"Mode Spark - Source CSV","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/csv#écriture","content":"Le format CSV n'est pas conseillé pour écrire des Dataset Trevas (voir ici) ","version":"Next","tagName":"h3"},{"title":"Mode Spark","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/spark-mode","content":"","keywords":"","version":"Next"},{"title":"SparkDataset​","type":1,"pageTitle":"Mode Spark","url":"/Trevas/fr/developer-guide/spark-mode#sparkdataset","content":"Les datasets SparkDataset permettent de représenter les tables statistiques dans une application Java utilisant Trevas en mode Spark. ","version":"Next","tagName":"h3"},{"title":"Importer le module Spark de Trevas​","type":1,"pageTitle":"Mode Spark","url":"/Trevas/fr/developer-guide/spark-mode#importer-le-module-spark-de-trevas","content":"&lt;dependency&gt; &lt;groupId&gt;fr.insee.trevas&lt;/groupId&gt; &lt;artifactId&gt;vtl-spark&lt;/artifactId&gt; &lt;version&gt;1.0.2&lt;/version&gt; &lt;/dependency&gt;  ","version":"Next","tagName":"h3"},{"title":"Session Spark​","type":1,"pageTitle":"Mode Spark","url":"/Trevas/fr/developer-guide/spark-mode#session-spark","content":"Afin d'exécuter du VTL via Trevas en mode Spark, il faut instancier une session Spark. La session peut être : locale (exécution sur le serveur Java)statique (exécution sur une instance Spark préalablement installée sur un serveur)dynamique (exécution dynamique au sein d'un cluster Kubernetes) SparkSession spark = SparkSession.builder().master(&quot;local&quot;).getOrCreate();  ","version":"Next","tagName":"h3"},{"title":"Exemple​","type":1,"pageTitle":"Mode Spark","url":"/Trevas/fr/developer-guide/spark-mode#exemple","content":"ScriptEngine engine = new ScriptEngineManager().getEngineByName(&quot;vtl&quot;); Bindings bindings = new SimpleBindings(); SparkDataset dataset = new SparkDataset(spark.read().parquet(&quot;folder_path&quot;)); bindings.put(&quot;myDataset&quot;, dataset); engine.getContext().setBindings(bindings, ScriptContext.ENGINE_SCOPE); engine.put(&quot;$vtl.engine.processing_engine_names&quot;, &quot;spark&quot;); engine.put(&quot;$vtl.spark.session&quot;, spark); String script = &quot;res := myDataset[filter var3 &gt; 6];&quot;; try { engine.eval(script); } catch (ScriptException e) { e.printStackTrace(); } Bindings outputBindings = engine.getContext().getBindings(ScriptContext.ENGINE_SCOPE); SparkDataset result = (SparkDataset) outputBindings.get(&quot;res&quot;); // Ensure direct resolution because of spark lazy mechanism (performance warning!) InMemoryDataset imResult = new InMemoryDataset( result.getDataPoints(), result.getDataStructure() );  ","version":"Next","tagName":"h3"},{"title":"Exécution distribuée​","type":1,"pageTitle":"Mode Spark","url":"/Trevas/fr/developer-guide/spark-mode#exécution-distribuée","content":"Que ce soit en mode statique ou dynamique, l'éxecution distribuée des traitements nécessite que les exécuteurs instanciés par le master soient en capacité de résoudre les traitements VTL. Il faut alors fournir les jar Trevas aux exécuteurs via l'options spark.jars de l'objet SparkConf : SparkSession.Builder sparkBuilder = SparkSession.builder() SparkConf conf = new SparkConf(); conf.set(&quot;spark.jars&quot;, String.join(&quot;,&quot;, &quot;/vtl-spark.jar&quot;, &quot;/vtl-model.jar&quot;, &quot;/vtl-parser.jar&quot;, &quot;/vtl-engine.jar&quot;, )); sparkBuilder.config(conf); ... SparkSession spark = sparkBuilder.getOrCreate();  ","version":"Next","tagName":"h3"},{"title":"Exécution dans un cluster Kubernetes​","type":1,"pageTitle":"Mode Spark","url":"/Trevas/fr/developer-guide/spark-mode#exécution-dans-un-cluster-kubernetes","content":"De nombreuses options sont détaillées dans la documentation officielle Parmi celles-ci, une option est particulièrement importante : l'image Docker qui permettra au exécuteurs de résoudre les traitements VTL. Une image à façon est disponible ici. SparkSession.Builder sparkBuilder = SparkSession.builder() SparkConf conf = new SparkConf(); conf.set(&quot;spark.kubernetes.container.image&quot;, &quot;inseefrlab/spark-hadoop:trevas-0.4.7-spark-3.2.1-hadoop-3.3.1-postgresql-42.3.3-postgis-2021.1.0&quot;); conf.set(&quot;spark.kubernetes.container.pullPolicy&quot;, &quot;IfNotPresent&quot;); sparkBuilder.config(conf); sparkBuilder.master(&quot;k8s://...&quot;) ... SparkSession spark = sparkBuilder.getOrCreate();  ","version":"Next","tagName":"h3"},{"title":"Mode Spark - Source JDBC","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/jdbc","content":"","keywords":"","version":"Next"},{"title":"Lecture​","type":1,"pageTitle":"Mode Spark - Source JDBC","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/jdbc#lecture","content":"Dataset&lt;Row&gt; sparkDataset = spark.read() .format(&quot;jdbc&quot;) .option(&quot;url&quot;, &quot;myUrl&quot;) .option(&quot;user&quot;, &quot;myUser&quot;) .option(&quot;password&quot;, &quot;myPwd&quot;) .option(&quot;query&quot;, &quot;myQuery&quot;) .option(&quot;driver&quot;, &quot;org.postgresql.Driver&quot;) .load(); SparkDataset dataset = new SparkDataset(sparkDataset);  Dans cet exemple, le projet doit contenir la dépendance du Driver postgresql &lt;dependency&gt; &lt;groupId&gt;org.postgresql&lt;/groupId&gt; &lt;artifactId&gt;postgresql&lt;/artifactId&gt; &lt;version&gt;42.5.1&lt;/version&gt; &lt;/dependency&gt;  Voir l'ensemble des options supportées dans la documentation officielle. ","version":"Next","tagName":"h3"},{"title":"Écriture​","type":1,"pageTitle":"Mode Spark - Source JDBC","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/jdbc#écriture","content":"Le format JDBC n'est pas conseillé pour écrire des Dataset Trevas (voir ici) ","version":"Next","tagName":"h3"},{"title":"Mode Spark - Source Parquet","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/parquet","content":"","keywords":"","version":"Next"},{"title":"Métadonnées​","type":1,"pageTitle":"Mode Spark - Source Parquet","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/parquet#métadonnées","content":"Les métadonnées des jeux de données Parquet sont inférées du schéma. Types​ Trevas assure la conversion entre les types Parquet et les types supportés par le moteur Trevas. Roles​ Les rôles VTL sont ajoutés par Trevas au schéma Parquet, via l'adjonction d'une métadonnée vtlRole sur chaque descriptif de champ. Par défaut, les colonnes sans rôle dans le schéma Parquet auront pour rôle MEASURE dans Trevas. VTL permet de faire évoluer les rôles au sein des scripts (voir ici) ","version":"Next","tagName":"h3"},{"title":"Lecture​","type":1,"pageTitle":"Mode Spark - Source Parquet","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/parquet#lecture","content":"Dataset&lt;Row&gt; sparkDataset = spark.read().parquet(&quot;folder_path&quot;); SparkDataset dataset = new SparkDataset(sparkDataset);  ","version":"Next","tagName":"h3"},{"title":"Écriture​","type":1,"pageTitle":"Mode Spark - Source Parquet","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/parquet#écriture","content":"// Trevas Spark Dataset SparkDataset dataset = ...; // Spark Dataset Dataset&lt;Row&gt; sparkDataset = dataset.getSparkDataset(); sparkDataset.write() .mode(SaveMode.Overwrite) .parquet(&quot;folder_path&quot;);  ","version":"Next","tagName":"h3"},{"title":"Mode Spark - Autres sources","type":0,"sectionRef":"#","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/others","content":"","keywords":"","version":"Next"},{"title":"Constructeur SparkDataset​","type":1,"pageTitle":"Mode Spark - Autres sources","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/others#constructeur-sparkdataset","content":"StructType schema = DataTypes.createStructType(List.of( DataTypes.createStructField(&quot;string&quot;, DataTypes.StringType, false), DataTypes.createStructField(&quot;integer&quot;, DataTypes.LongType, false), DataTypes.createStructField(&quot;boolean&quot;, DataTypes.BooleanType, false), DataTypes.createStructField(&quot;float&quot;, DataTypes.DoubleType, false) )); Dataset&lt;Row&gt; dataFrame = spark.createDataFrame(List.of( RowFactory.create(&quot;string&quot;, 1L, true, 1.5D) ), schema); fr.insee.vtl.model.Dataset sparkDataset = new SparkDataset(dataFrame);  ","version":"Next","tagName":"h3"},{"title":"Autres formats supportés par Spark​","type":1,"pageTitle":"Mode Spark - Autres sources","url":"/Trevas/fr/developer-guide/spark-mode/data-sources/others#autres-formats-supportés-par-spark","content":"Voir la documentation officielle ","version":"Next","tagName":"h3"},{"title":"Trevas","type":0,"sectionRef":"#","url":"/Trevas/fr/introduction","content":"","keywords":"","version":"Next"},{"title":"Qu'est ce que VTL ?​","type":1,"pageTitle":"Trevas","url":"/Trevas/fr/introduction#quest-ce-que-vtl-","content":"langage métier, au niveau logique et convivial pour les statisticienss'appuie sur des métadonnées structurelles de standardsinteropérable, indépendant de la plateformelangage fonctionnel, permettant le traçage des données pour plus d'informations et de reproductibilité ","version":"Next","tagName":"h2"},{"title":"Écosystème Trevas​","type":1,"pageTitle":"Trevas","url":"/Trevas/fr/introduction#écosystème-trevas","content":" Trevas JupyterTrevas LabTrevas Lab APITrevas Batch ","version":"Next","tagName":"h2"},{"title":"Description technique​","type":1,"pageTitle":"Trevas","url":"/Trevas/fr/introduction#description-technique","content":"Trevas fournit des moteurs VTL pour différents environnemens d'exécution, notamment un moteur Java 11 et un moteur Apache Spark. Les moteurs Trevas se basent sur la spécification JSR 223 qui décrit l'utilisation de langages de scripts en Java. ","version":"Next","tagName":"h2"},{"title":"Modules Trevas","type":0,"sectionRef":"#","url":"/Trevas/fr/modules","content":"Modules Trevas VTL Engine Moteur d'exécution et son implémentation Java de base VTL Parser Parseur généré par Antlr à partir de la grammaire formelle de VTL 2.0 VTL Spark Exécution de transformations VTL par Spark VTL Model Modèle définissant les objets utilisés dans le moteur VTL JDBC Utilisation de sources de données SQL VTL Jackson Sérialisation / désérialisation JSON de jeux de données","keywords":"","version":"Next"},{"title":"VTL Jackson","type":0,"sectionRef":"#","url":"/Trevas/fr/modules/jackson","content":"VTL Jackson Module de sérialisation / désérialisation JSON de jeux de données.","keywords":"","version":"Next"},{"title":"VTL Engine","type":0,"sectionRef":"#","url":"/Trevas/fr/modules/engine","content":"VTL Engine Moteur d'exécution et son implémentation Java de base.","keywords":"","version":"Next"},{"title":"VTL JDBC","type":0,"sectionRef":"#","url":"/Trevas/fr/modules/jdbc","content":"VTL JDBC Outils pour l'utilisation de sources de données SQL.","keywords":"","version":"Next"},{"title":"VTL Parser","type":0,"sectionRef":"#","url":"/Trevas/fr/modules/parser","content":"VTL Parser Parseur généré par Antlr à partir de la grammaire formelle de VTL 2.0.","keywords":"","version":"Next"},{"title":"VTL Model","type":0,"sectionRef":"#","url":"/Trevas/fr/modules/model","content":"VTL Model Modèle définissant les objets utilisés dans le moteur.","keywords":"","version":"Next"},{"title":"VTL Spark","type":0,"sectionRef":"#","url":"/Trevas/fr/modules/spark","content":"VTL Spark Module permettant l'exécution de transformations VTL par Spark.","keywords":"","version":"Next"},{"title":"Trevas releases","type":0,"sectionRef":"#","url":"/Trevas/fr/releases","content":"Trevas releases v1.x.x","keywords":"","version":"Next"},{"title":"Release 1.x.x","type":0,"sectionRef":"#","url":"/Trevas/fr/releases/1.x.x","content":"","keywords":"","version":"Next"},{"title":"Version 1.0.2 - 30/06/23​","type":1,"pageTitle":"Release 1.x.x","url":"/Trevas/fr/releases/1.x.x#version-102---300623","content":"(Voir la note de livraison technique sur Github) Découpage de l'enregistrement de méthodes au sein du moteur VTL en 2 méthodes: registerMethod et registerGlobalMethodCorrection d'un bug pour les opérateurs in / not_in avec la valeur null ","version":"Next","tagName":"h2"},{"title":"Version 1.0.1 - 23/05/23​","type":1,"pageTitle":"Release 1.x.x","url":"/Trevas/fr/releases/1.x.x#version-101---230523","content":"(Voir la note de livraison technique sur Github) Correction d'un souci de sérialisation Spark dans l'implémentation de check_datapoint ","version":"Next","tagName":"h2"},{"title":"Version 1.0.0 - 12/05/23​","type":1,"pageTitle":"Release 1.x.x","url":"/Trevas/fr/releases/1.x.x#version-100---120523","content":"(Voir la note de livraison technique sur Github) Membership: #Validation: check, check_datapointOpérateurs appliqués aux datasets (ceil(ds), ds1 &lt; ds2, mod(ds, 5), ...) ","version":"Next","tagName":"h2"},{"title":"Couverture VTL de Trevas","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage","content":"Couverture VTL de Trevas Opérateurs à usage général Opérateurs de jointure Opérateurs de chaînes Opérateurs numériques Opérateurs de comparaison Opérateurs booléens Opérateurs temporels Opérateurs ensemblistes Aggrégation hierarchique Opérateurs d'agrégat Opérateurs analytiques Opérateurs de validation Opérateurs conditionnels Opérateurs de clause","keywords":"","version":"Next"},{"title":"VTL - Opérateurs d'agrégat","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/aggregate-operators","content":"VTL - Opérateurs d'agrégat Nom\tSymbole\tInMemory\tSparkInstanciation de l'opérateur d'agrégat ✔️\t✔️ Comptage du nombre de point de données\tcount\t✔️\t✔️ Valeur minimuale\tmin\t✔️\t✔️ Valeur maximale\tmax\t✔️\t✔️ Valeur médiane\tmedian\t✔️\t✔️ Somme\tsum\t✔️\t✔️ Moyenne\tavg\t✔️\t✔️ Écart-type de la population\tstddev_pop\t✔️\t✔️ Écart-type de l'échantillon\tstddev_samp\t✔️\t✔️ Variance de la population\tvar_pop\t✔️\t✔️ Variance de l'échantillon\tvar_samp\t✔️\t✔️","keywords":"","version":"Next"},{"title":"VTL - Opérateurs analytiques","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/analytic-operators","content":"VTL - Opérateurs analytiques Nom\tSymbole\tInMemory\tSparkInstanciation de l'opérateur analytique ❌\t✔️ Comptage du nombre de point de données\tcount\t❌\t✔️ Valeur minimuale\tmin\t❌\t✔️ Valeur maximale\tmax\t❌\t✔️ Valeur médiane\tmedian\t❌\t✔️ Somme\tsum\t❌\t✔️ Moyenne\tavg\t❌\t✔️ Écart-type de la population\tstddev_pop\t❌\t✔️ Écart-type de l'échantillon\tstddev_samp\t❌\t✔️ Variance de la population\tvar_pop\t❌\t✔️ Variance de l'échantillon\tvar_samp\t❌\t✔️ Première valeur\tfirst_value\t❌\t✔️ Dernière valeur\tlast_value\t❌\t✔️ Décalage (vers le bas)\tlag\t❌\t✔️ Décalage (vers le haut)\tlead\t❌\t✔️ Rang\trank\t❌\t✔️ Part du total partiel\tratio_to_report\t❌\t✔️","keywords":"","version":"Next"},{"title":"VTL - Opérateurs de clause","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/clause-operators","content":"VTL - Opérateurs de clause Nom\tSymbole\tInMemory\tSparkFiltrage des points de données\tfilter\t✔️\t✔️ Calcul d'un composant\tcalc\t✔️\t✔️ Agrégation\taggr\t❌\t✔️ Conservation d'un composant\tkeep\t✔️\t✔️ Suppression d'un composant\tdrop\t✔️\t✔️ Changement du nom d'un composant\trename\t✔️\t✔️ Pivotage\tpivot\t❌\t❌ Non pivotage\tunpivot\t❌\t❌ Sous-espace\tsub\t❌\t❌","keywords":"","version":"Next"},{"title":"VTL - Opérateurs booléens","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/boolean-operators","content":"VTL - Opérateurs booléens Nom\tSymbole\tBoolean\tComponent\tDatasetConjonction logique\tand\t✔️\t✔️\t✔️ Disjonction logique\tor\t✔️\t✔️\t✔️ Disjonction exclusive\txor\t✔️\t✔️\t✔️ Négation logique\tnot\t✔️\t✔️\t✔️","keywords":"","version":"Next"},{"title":"VTL - Opérateurs de comparaison","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/comparison-operators","content":"VTL - Opérateurs de comparaison Nom\tSymbole\tScalar\tComponent\tDatasetÉgal à\t=\t✔️\t✔️\t✔️ Différent de\t&lt;&gt;\t✔️\t✔️\t✔️ Plus grand que\t&gt;\t✔️\t✔️\t✔️ Plus petit que\t&lt;\t✔️\t✔️\t✔️ Plus grand ou égal à\t&gt; =\t✔️\t✔️\t✔️ Plus petit ou égal à\t&lt;=\t✔️\t✔️\t✔️ Entre\tbetween\t✔️\t✔️\t✔️ Élément de\tin / not_in\t✔️\t✔️\t✔️ Correspondance\tmatch_characters\t✔️\t✔️\t✔️ Est nul\tisnull\t✔️\t✔️\t✔️ Existe dans\texists_in\tN/A\tN/A\t❌","keywords":"","version":"Next"},{"title":"VTL - Opérateurs conditionnels","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/conditional-operators","content":"VTL - Opérateurs conditionnels Nom\tSymbole\tBoolean\tComponent\tDatasetSi Alors Sinon\tif-then-else\t✔️\t✔️\t✔️ Valeur nulle\tnvl\t✔️\t✔️\t✔️","keywords":"","version":"Next"},{"title":"VTL - Opérateurs à usage général","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/general-operators","content":"VTL - Opérateurs à usage général Nom\tSymbole\tSupportedParenthèses\t( )\t✔️ Affectation persistante\t&lt;-\t❌ Affectation temporaire\t:=\t✔️ Appartenance\t#\t✔️ Appel d'un opérateur défini par l'utilisateur ✔️ Évaluation d'une routine externe\teval\t❌ Conversion de types (chaîne, entier, flottant, booléen)\tcast\t✔️ Conversion de types (autres)\tcast\t❌","keywords":"","version":"Next"},{"title":"VTL - Opérateurs de validation des données","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/data-validation-operators","content":"VTL - Opérateurs de validation des données Nom\tSymbole\tSupportedValidation des points de données\tcheck_datapoint\t✔️ Validation de la hiérarchie\tcheck_hierarchy\t❌ Validation\tcheck\t✔️","keywords":"","version":"Next"},{"title":"VTL - Opérateurs de jointure","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/join-operators","content":"VTL - Opérateurs de jointure Nom\tSymbole\tInMemory\tSparkJointures\tinner_join, left_join, full_join, cross_join\t✔️\t✔️","keywords":"","version":"Next"},{"title":"VTL - Agrégation hiérarchique","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/hierarchical-aggregation","content":"VTL - Agrégation hiérarchique Nom\tSymbole\tInMemory\tSparkAggrégation hiérarchique\thierarchy\t❌\t❌","keywords":"","version":"Next"},{"title":"VTL - Opérateurs ensemblistes","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/set-operators","content":"VTL - Opérateurs ensemblistes Nom\tSymbole\tInMemory\tSparkUnion\tunion\t❌\t✔️ Intersection\tintersect\t❌\t❌ Symétrie\tsetdiff\t❌\t❌ Difference symétrique\tsymdiff\t❌\t❌","keywords":"","version":"Next"},{"title":"VTL - Opérateurs numériques","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/numeric-operators","content":"VTL - Opérateurs numériques Nom\tSymbole\tNumber\tComponent\tDatasetPlus unaire\t+\t✔️\t✔️\t✔️ Moins unaire\t-\t✔️\t✔️\t✔️ Addition\t+\t✔️\t✔️\t✔️ Soustraction\t-\t✔️\t✔️\t✔️ Multiplication\t*\t✔️\t✔️\t✔️ Division\t/\t✔️\t✔️\t✔️ Concatenation\t||\t✔️\t✔️\t✔️ Modulo\tmod\t✔️\t✔️\t✔️ Arrondi\tround\t✔️\t✔️\t✔️ Troncature\ttrunc\t✔️\t✔️\t✔️ Ceiling\tceil\t✔️\t✔️\t✔️ Plafonnement\tfloor\t✔️\t✔️\t✔️ Valeur absolu\tabs\t✔️\t✔️\t✔️ Exponentiel\texp\t✔️\t✔️\t✔️ Logarithme néperien\tln\t✔️\t✔️\t✔️ Puissance\tpower\t✔️\t✔️\t✔️ Logarithme\tlog\t✔️\t✔️\t✔️ Racine carrée\tsqrt\t✔️\t✔️\t✔️","keywords":"","version":"Next"},{"title":"VTL - Opérateurs de chaîne de caractères","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/string-operators","content":"VTL - Opérateurs de chaîne de caractères Nom\tSymbole\tString\tComponent\tDatasetConcatenation de chaînes\t||\t✔️\t✔️\t✔️ Suppression des espaces blancs\ttrim, rtrim, ltrim\t✔️\t✔️\t✔️ Conversion de la casse des caractères\tupper/lower\t✔️\t✔️\t✔️ Extraction de sous-chaînes\tsubstr\t✔️\t✔️\t✔️ Remplacement du motif de chaîne de caractères\treplace\t✔️\t✔️\t✔️ Emplacement du motif de chaîne de caractères\tinstr\t✔️\t✔️\t✔️ Longueur d'une chaîne de caractères\tlength\t✔️\t✔️\t✔️","keywords":"","version":"Next"},{"title":"VTL - Opérateurs temporels","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/coverage/time-operators","content":"VTL - Opérateurs temporels Nom\tSymbole\tTime_period\tComponent\tDatasetIndicateur de période\tperiod_indicator\t❌\t❌\t❌ Remplir les séries temporelles\tfill_time_series\t❌\t❌\t❌ Flux vers stock\tflow_to_stock\t❌\t❌\t❌ Stock vers flux\tstock_to_flow\t❌\t❌\t❌ Time shift\ttimeshift\t❌\t❌\t❌ Décalage dans le temps\ttime_agg\t❌\t❌\t❌ Heure courante\tcurrent_date\t✔️\tN/A\tN/A","keywords":"","version":"Next"},{"title":"Trevas client apps","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/vtl/client-apps","content":"Trevas client apps Trevas Jupyter Noyau Jupyter Trevas Lab Application web","keywords":"","version":"Next"},{"title":"VTL","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/vtl","content":"","keywords":"","version":"Next"},{"title":"Documentation​","type":1,"pageTitle":"VTL","url":"/Trevas/fr/user-guide/vtl#documentation","content":"La documentation de VTL est accessible sur le site officiel SDMX : Manuel utilisateurManuel de référence ","version":"Next","tagName":"h2"},{"title":"Jeux de données​","type":1,"pageTitle":"VTL","url":"/Trevas/fr/user-guide/vtl#jeux-de-données","content":"Les jeux de données VTL doivent être décrit par des métadonnées. Les différentes colonnes ont un type et un role. Par défaut, dans Trevas, une colonne sans type ni rôle se verra affecter le type string et le role measure. L'utilisateur aura ensuite la possibilité de muter ces attributs au sein de son script, via les opérateurs calc et cast notamment. ","version":"Next","tagName":"h2"},{"title":"Exemple simple​","type":1,"pageTitle":"VTL","url":"/Trevas/fr/user-guide/vtl#exemple-simple","content":"En considérant ds_1 défini comme suit : \tid_1\tid_2\tme_1type\tstring\tstring\tstring role\tidentifier\tidentifier\tmeasure id_1\tid_2\tme_1&quot;75001&quot;\t&quot;75&quot;\t&quot;10&quot; &quot;75002&quot;\t&quot;75&quot;\t&quot;100&quot; &quot;70001&quot;\t&quot;70&quot;\t&quot;5&quot; &quot;70002&quot;\t&quot;70&quot;\t&quot;70&quot; Pour obtenir la somme de me_1 par id_2, il faut que seul id_2 ait pour rôle identifier et que le type de me_1 soit integer. On applique donc le script suivant : ds_2 := ds_1[calc measure id_2 := id_2, me_1 := cast(me_1, integer)];  ds_2 est alors : \tid_1\tid_2\tme_1type\tstring\tstring\tinteger role\tmeasure\tidentifier\tmeasure id_1\tid_2\tme_1&quot;75001&quot;\t&quot;75&quot;\t10 &quot;75002&quot;\t&quot;75&quot;\t100 &quot;70001&quot;\t&quot;70&quot;\t5 &quot;70002&quot;\t&quot;70&quot;\t70 On peut dorénavant appliquer l'opérateur aggr : ds_3 := ds_2[aggr sum_me_1 := sum(me_1) group by id_2];  Et obtenir ds_3 : \tid_2\tsum_me_1type\tstring\tinteger role\tidentifier\tmeasure id_2\tme_1&quot;75&quot;\t110 &quot;70&quot;\t75 ","version":"Next","tagName":"h2"},{"title":"Trevas Jupyter","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/vtl/client-apps/lab","content":"","keywords":"","version":"Next"},{"title":"Sources​","type":1,"pageTitle":"Trevas Jupyter","url":"/Trevas/fr/user-guide/vtl/client-apps/lab#sources","content":"Github​ Trevas Lab UITrevas LabTrevas Spark Hadoop Docker Hub​ Trevas Lab UITrevas LabTrevas Spark Hadoop ","version":"Next","tagName":"h3"},{"title":"Démo​","type":1,"pageTitle":"Trevas Jupyter","url":"/Trevas/fr/user-guide/vtl/client-apps/lab#démo","content":"Une vidéo arrivera bientôt. ","version":"Next","tagName":"h3"},{"title":"Trevas Jupyter","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/vtl/client-apps/jupyter","content":"","keywords":"","version":"Next"},{"title":"Sources​","type":1,"pageTitle":"Trevas Jupyter","url":"/Trevas/fr/user-guide/vtl/client-apps/jupyter#sources","content":"Github​ Trevas Jupyter Docker Hub​ Trevas Jupyter ","version":"Next","tagName":"h3"},{"title":"Démo​","type":1,"pageTitle":"Trevas Jupyter","url":"/Trevas/fr/user-guide/vtl/client-apps/jupyter#démo","content":"Une vidéo arrivera bientôt ","version":"Next","tagName":"h3"},{"title":"Sas vs VTL exemples","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/vtl/sas-vtl","content":"Sas vs VTL exemples Keep Drop Rename","keywords":"","version":"Next"},{"title":"Drop","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/vtl/sas-vtl/drop","content":"Drop Sas VTL","keywords":"","version":"Next"},{"title":"Rename","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/vtl/sas-vtl/rename","content":"Rename Sas VTL","keywords":"","version":"Next"},{"title":"Keep","type":0,"sectionRef":"#","url":"/Trevas/fr/user-guide/vtl/sas-vtl/keep","content":"Keep Sas VTL","keywords":"","version":"Next"}]